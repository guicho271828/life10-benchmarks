#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;; (declaim (optimize (debug 3) (speed 0) (safety 3)))
(declaim (optimize (debug 0) (speed 3) (safety 0)))
(defconstant n 40)
(defconstant m 80)
(defconstant g 66000)

(defmacro aref* (array i j)
  `(aref ,array (+ (* ,i ,m) ,j)))

(defun display (b)
  (declare ((simple-array (unsigned-byte 8) (#.(* n m))) b))
  (dotimes (i n)
    (dotimes (j m)
      (if (zerop (aref* b i j))
          (write-char #\Space)
          (write-char #\*)))
    (terpri)))


(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((b     (make-array (* n m) :element-type '(unsigned-byte 8)))
        (nextb (make-array (* n m) :element-type '(unsigned-byte 8))))
    (declare ((simple-array (unsigned-byte 8) (#.(* n m))) b nextb))
    (setf (aref* b 19 41) 1)
    (setf (aref* b 20 40) 1)
    (setf (aref* b 21 40) 1)
    (setf (aref* b 22 40) 1)
    (setf (aref* b 22 41) 1)
    (setf (aref* b 22 42) 1)
    (setf (aref* b 22 43) 1)
    (setf (aref* b 19 44) 1)
    (princ "Before:")
    (display b)

    (dotimes (k g)
      (dotimes (i n)
        (let* ((nm1 (1- n))
               (up (if (/= i 0)
                       (1- i)
                       nm1))
               (upm (* up m))
               (down (if (/= i nm1)
                         (1+ i)
                         0))
               (downm (* down m))
               (im (* i m)))
          
          (dotimes (j m)
            (let* ((mm1 (1- m))
                   (left (if (/= j 0)
                             (1- j)
                             mm1))
                   (right (if (/= j mm1)
                              (1+ j)
                              0))
                   (count 
                    (+ (aref b (+ upm  left))
                       (aref b (+ upm  j))
                       (aref b (+ upm  right))
                       (aref b (+ im   right))
                       (aref b (+ downm right))
                       (aref b (+ downm j))
                       (aref b (+ downm left))
                       (aref b (+ im   left)))))
              (setf (aref* nextb i j)
                    (case count
                      (2 (aref* b i j))
                      (3 1)
                      (t 0)))))))
      (rotatef b nextb))
    (format t "After ~a generations:~%" g)
    (display b)))

;;; vim: set ft=lisp lisp:
